<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Core\bin\Debug\Dddml.Core.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Serialization\bin\Debug\Dddml.Serialization.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.T4\bin\Debug\Dddml.T4.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\packages\YamlDotNet.3.8.0\lib\net35\YamlDotNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Domain" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ include file="T4Toolbox.tt" #>
<#
    TemplatingContext.Current.CurrentAssembly = "Dddml.Wms.Common";
    TemplatingContext.Current.SpecializationNamespace = "Dddml.Wms.Specialization";

    var boundedContext = LoadBoundedContext();
	boundedContext.DefaultUserIdType = "string";

	boundedContext.IsUsingSeparatedDomainAggregateNamespace = false;

	boundedContext.IsGenericTypeAsType = true;

	boundedContext.Metadata[Dddml.T4.Extensions.BoundedContextExtension.MetadataKeyDomainAssembly] = "Dddml.Wms.Common";

	boundedContext.Aggregates["AttributeSetInstance"].Metadata[Dddml.T4.Extensions.EntityBaseExtension.MetadataKeyPersistingStateEventRemovedPropertiesAsSet] = true;

	var typeNamespaces = new Dictionary<string, string>();
	typeNamespaces.Add("Money", "NodaMoney");
	boundedContext.SetTypeNamespaces(typeNamespaces);

	var clrValueTypes = new string[]{ "Money" };
	boundedContext.SetClrValueTypes(clrValueTypes);

	var nhibernateTypes = new Dictionary<string, NHibernateType>();
	var nodaMoneyNHibernateType = new NHibernateType() {
			ActualTypeName = "Money", 
			AssemblyQualifiedName = "Dddml.Wms.Services.Domain.NHibernate.NodaMoneyType, Dddml.Wms.Services",
			PropertyNames = new string[] { "Amount", "Currency" }, 
			PropertyClrTypes = new string[] { "decimal", "string" }
		};
	nhibernateTypes.Add(nodaMoneyNHibernateType.ActualTypeName, nodaMoneyNHibernateType);
	boundedContext.SetNHibernateTypes(nhibernateTypes);


	boundedContext.Refresh();

	foreach (var agg in boundedContext.Aggregates.Values)
	{
		agg.GenerateAggregateStateEventIdValueObject();
		agg.GenerateAllEntityStateEventIdValueObjects();
	}

	boundedContext.Refresh();
	//boundedContext.ReplacePropertyEnumTypeWithBaseType();	

// ////////////////////////////
	foreach (var aggregate in boundedContext.Aggregates.Values)
	{
		var mvObjcts = aggregate.GenerateAllEntityMViewObjects();
		foreach (var mvo in mvObjcts)
		{
			boundedContext.Aggregates.Add(mvo.Name, mvo);
			mvo.GenerateAggregateStateEventIdValueObject();
			mvo.SetAggregateDomainSubNamespaceName("MViews");
			mvo.SetStateDatabaseTableNameFormat("{0}s");
			mvo.SetUsingRViewAsMView(true);
			mvo.SetHttpServiceResourceCollectionNameFormat("{0}s");
		} 
	}

	boundedContext.Refresh();
	boundedContext.ReplacePropertyEnumTypeWithBaseType();

	var mviewObjects = new List<Aggregate>();
	foreach (var aggregate in boundedContext.Aggregates.Values)
	{
		if (aggregate.IsMViewObject())
		{
			mviewObjects.Add(aggregate);
		}
	}

// ////////////////////////////


#>
<#+
    private BoundedContext LoadBoundedContext()
    {
        string projectFile = TransformationContext.Current.GetPropertyValue("MSBuildProjectFullPath");
		string projectDir = System.IO.Path.GetDirectoryName(projectFile);
        string filePath1 = System.IO.Path.Combine(projectDir, "../dddml/AttributeSet.yaml");
		string filePath2 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceDddml.yaml");
		string filePath3 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceExtensionFieldGroupDddml.yaml");
        string filePath4 = System.IO.Path.Combine(projectDir, "../dddml/InOut.yaml");
		string filePath5 = System.IO.Path.Combine(projectDir, "../dddml/Warehouse.yaml");
		string filePath6 = System.IO.Path.Combine(projectDir, "../dddml/Organization.yaml");

        BoundedContext boundedContext = BoundedContextUtils.LoadFromFiles(new string[]{ filePath1, filePath2, filePath3, filePath4, filePath5, filePath6});
        boundedContext.DefaultModule = "Dddml.Wms";
        return boundedContext;
    }
#>
