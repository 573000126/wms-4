// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;
using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public partial class AttributeSetState : AttributeSetStateProperties, IAttributeSetState, ISaveable
	{

		public virtual long Version { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }


		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.AttributeSetId;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get
			{
				return this.UpdatedBy;
			}
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get
			{
				return this.UpdatedAt;
			}
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        private IAttributeUseStates _attributeUses;
      
        public virtual IAttributeUseStates AttributeUses
        {
            get
            {
                return this._attributeUses;
            }
        }

        protected internal virtual void SetAttributeUses(IAttributeUseStates value)
        {
            this._attributeUses = value;
        }



		public AttributeSetState ()
		{
            _attributeUses = new AttributeUseStates(this);

		}



		#region Saveable Implements

        public virtual void Save()
        {
            _attributeUses.Save();

        }


		#endregion


		public virtual void When(IAttributeSetStateCreated e)
		{
			ThrowOnWrongEvent(e);
			ReflectUtils.CopyPropertyValue("Name", e, this);
			ReflectUtils.CopyPropertyValue("Description", e, this);
			ReflectUtils.CopyPropertyValue("SerialNumberAttributeId", e, this);
			ReflectUtils.CopyPropertyValue("LotAttributeId", e, this);
			ReflectUtils.CopyPropertyValue("Active", e, this);
			ReflectUtils.SetPropertyValue("CreatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("CreatedAt", this, e.CreatedAt);

			foreach (IAttributeUseStateCreated innerEvent in e.AttributeUseEvents) {
				IAttributeUseState innerState = this.AttributeUses.Get(innerEvent.GlobalId.AttributeUseAttributeId);
				innerState.Mutate (innerEvent);
			}

		}


		public virtual void When(IAttributeSetStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.IsPropertyNameRemoved)
			{
				ReflectUtils.SetPropertyValue("Name", this, default(string));
			}
			else
			{
				if (e.Name != null)
				{
					ReflectUtils.CopyPropertyValue("Name", e, this);
				}
			}
			if (e.IsPropertyDescriptionRemoved)
			{
				ReflectUtils.SetPropertyValue("Description", this, default(string));
			}
			else
			{
				if (e.Description != null)
				{
					ReflectUtils.CopyPropertyValue("Description", e, this);
				}
			}
			if (e.IsPropertySerialNumberAttributeIdRemoved)
			{
				ReflectUtils.SetPropertyValue("SerialNumberAttributeId", this, default(string));
			}
			else
			{
				if (e.SerialNumberAttributeId != null)
				{
					ReflectUtils.CopyPropertyValue("SerialNumberAttributeId", e, this);
				}
			}
			if (e.IsPropertyLotAttributeIdRemoved)
			{
				ReflectUtils.SetPropertyValue("LotAttributeId", this, default(string));
			}
			else
			{
				if (e.LotAttributeId != null)
				{
					ReflectUtils.CopyPropertyValue("LotAttributeId", e, this);
				}
			}
			if (e.IsPropertyActiveRemoved)
			{
				ReflectUtils.SetPropertyValue("Active", this, default(bool));
			}
			else
			{
				if (e.Active != null)
				{
					ReflectUtils.CopyPropertyValue("Active", e, this);
				}
			}

			ReflectUtils.SetPropertyValue("UpdatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("UpdatedAt", this, e.CreatedAt);


			foreach (IAttributeUseStateEvent innerEvent in e.AttributeUseEvents)
            {
                IAttributeUseState innerState = this.AttributeUses.Get(innerEvent.GlobalId.AttributeUseAttributeId);

                var removed = innerEvent as IAttributeUseStateRemoved;
                if (removed != null)
                {
                    this.AttributeUses.Remove(innerState);
                }
                else
                {
                    innerState.Mutate(innerEvent);
                }
            }

		}

		public virtual void When(IAttributeSetStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			ReflectUtils.SetPropertyValue("Deleted", this, true);
			ReflectUtils.SetPropertyValue("UpdatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("UpdatedAt", this, e.CreatedAt);
		}


		public virtual void Mutate(IEvent e)
		{
			((dynamic)this).When((dynamic)e);
		}

		protected void ThrowOnWrongEvent(IAttributeSetStateEvent stateEvent)
		{
			var stateEntityId = this.AttributeSetId; // Aggregate Id
			var eventEntityId = stateEvent.StateEventId.AttributeSetId;
			if (stateEntityId != eventEntityId)
			{
				DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
			}
			var stateVersion = this.Version;
			var eventVersion = stateEvent.StateEventId.AttributeSetVersion;
			if (stateVersion != eventVersion)
			{
				throw DomainError.Named("concurrencyConflict", "Conflict between state version {0} and event version {1}", stateVersion, eventVersion);
			}

		}
	}

}

