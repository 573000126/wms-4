// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;
using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public partial class AttributeSetInstanceState : AttributeSetInstanceStateProperties, IAttributeSetInstanceState
	{

		public virtual long Version { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }


		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.AttributeSetInstanceId;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get
			{
				return this.UpdatedBy;
			}
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get
			{
				return this.UpdatedAt;
			}
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


		public AttributeSetInstanceState ()
		{
		}



		public virtual void When(IAttributeSetInstanceStateCreated e)
		{
			ThrowOnWrongEvent(e);
			ReflectUtils.CopyPropertyValue("AttributeSetId", e, this);
			ReflectUtils.CopyPropertyValue("SerialNumber", e, this);
			ReflectUtils.CopyPropertyValue("Lot", e, this);
			ReflectUtils.CopyPropertyValue("Description", e, this);
			ReflectUtils.CopyPropertyValue("Active", e, this);
			ReflectUtils.SetPropertyValue("CreatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("CreatedAt", this, e.CreatedAt);


		}


		public virtual void When(IAttributeSetInstanceStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.IsPropertyAttributeSetIdRemoved)
			{
				ReflectUtils.SetPropertyValue("AttributeSetId", this, default(string));
			}
			else
			{
				if (e.AttributeSetId != null)
				{
					ReflectUtils.CopyPropertyValue("AttributeSetId", e, this);
				}
			}
			if (e.IsPropertySerialNumberRemoved)
			{
				ReflectUtils.SetPropertyValue("SerialNumber", this, default(string));
			}
			else
			{
				if (e.SerialNumber != null)
				{
					ReflectUtils.CopyPropertyValue("SerialNumber", e, this);
				}
			}
			if (e.IsPropertyLotRemoved)
			{
				ReflectUtils.SetPropertyValue("Lot", this, default(string));
			}
			else
			{
				if (e.Lot != null)
				{
					ReflectUtils.CopyPropertyValue("Lot", e, this);
				}
			}
			if (e.IsPropertyDescriptionRemoved)
			{
				ReflectUtils.SetPropertyValue("Description", this, default(string));
			}
			else
			{
				if (e.Description != null)
				{
					ReflectUtils.CopyPropertyValue("Description", e, this);
				}
			}
			if (e.IsPropertyActiveRemoved)
			{
				ReflectUtils.SetPropertyValue("Active", this, default(bool));
			}
			else
			{
				if (e.Active != null)
				{
					ReflectUtils.CopyPropertyValue("Active", e, this);
				}
			}

			ReflectUtils.SetPropertyValue("UpdatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("UpdatedAt", this, e.CreatedAt);


		}

		public virtual void When(IAttributeSetInstanceStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			ReflectUtils.SetPropertyValue("Deleted", this, true);
			ReflectUtils.SetPropertyValue("UpdatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("UpdatedAt", this, e.CreatedAt);
		}


		public virtual void Mutate(IEvent e)
		{
			((dynamic)this).When((dynamic)e);
		}

		protected void ThrowOnWrongEvent(IAttributeSetInstanceStateEvent stateEvent)
		{
			var stateEntityId = this.AttributeSetInstanceId; // Aggregate Id
			var eventEntityId = stateEvent.StateEventId.AttributeSetInstanceId;
			if (stateEntityId != eventEntityId)
			{
				DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
			}
			var stateVersion = this.Version;
			var eventVersion = stateEvent.StateEventId.AttributeSetInstanceVersion;
			if (stateVersion != eventVersion)
			{
				throw DomainError.Named("concurrencyConflict", "Conflict between state version {0} and event version {1}", stateVersion, eventVersion);
			}

		}
	}

}

