// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class UserLoginStates : IUserLoginStates
    {
        
		protected IUserLoginStateDao UserLoginStateDao
		{
			get
			{
				return ApplicationContext.Current["UserLoginStateDao"] as IUserLoginStateDao;
			}
		}

		private Dictionary<UserLoginId, IUserLoginState> _loadedUserLoginStates = new Dictionary<UserLoginId, IUserLoginState>();

        private List<IUserLoginState> _removedUserLoginStates = new List<IUserLoginState>();

		protected virtual IEnumerable<IUserLoginState> LoadedUserLoginStates {
			get {
				return this._loadedUserLoginStates.Values;
			}
		}

        private IUserState _userState;

        private IEnumerable<IUserLoginState> _innerEnumerable;

        private IEnumerable<IUserLoginState> InnerEnumeralbe
        {
            get
            {
                if (_innerEnumerable == null)
                {
                    _innerEnumerable = UserLoginStateDao.FindByUserId(_userState.UserId);
                }
                return _innerEnumerable;
            }
        }

        public UserLoginStates(IUserState outerState)
        {
            this._userState = outerState;
        }

        public IEnumerator<IUserLoginState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IUserLoginState state)
        {
            this._removedUserLoginStates.Add(state);
        }

        public virtual IUserLoginState Get(LoginKey loginKey)
		{
			UserLoginId globalId = new UserLoginId(_userState.UserId, loginKey);
            if (_loadedUserLoginStates.ContainsKey(globalId)) {
                return _loadedUserLoginStates[globalId];
            }
            var state = UserLoginStateDao.Get(globalId);
			_loadedUserLoginStates.Add (globalId, state);
			return state;
		}

        public virtual void AddToSave(IUserLoginState state)
        {
            this._loadedUserLoginStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IUserLoginState s in this.LoadedUserLoginStates) {
                UserLoginStateDao.Save(s);
			}
            foreach(IUserLoginState s in this._removedUserLoginStates)
            {
                UserLoginStateDao.Delete(s);
            }
		}

		#endregion


    }



}


