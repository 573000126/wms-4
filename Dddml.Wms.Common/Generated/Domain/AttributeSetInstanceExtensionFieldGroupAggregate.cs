// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

    public partial class AttributeSetInstanceExtensionFieldGroupAggregate : AggregateBase, IAttributeSetInstanceExtensionFieldGroupAggregate
    {

        readonly IAttributeSetInstanceExtensionFieldGroupState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IAttributeSetInstanceExtensionFieldGroupState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public AttributeSetInstanceExtensionFieldGroupAggregate(IAttributeSetInstanceExtensionFieldGroupState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (_state.Version == AttributeSetInstanceExtensionFieldGroupState.VersionZero)
            {
                if (c is ICreateAttributeSetInstanceExtensionFieldGroup)
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (c is ICreateAttributeSetInstanceExtensionFieldGroup)
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        protected virtual void Apply(IEvent e)
        {
            BeforeApply(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateAttributeSetInstanceExtensionFieldGroup c)
        {
            IAttributeSetInstanceExtensionFieldGroupStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchAttributeSetInstanceExtensionFieldGroup c)
        {
            IAttributeSetInstanceExtensionFieldGroupStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteAttributeSetInstanceExtensionFieldGroup c)
        {
            IAttributeSetInstanceExtensionFieldGroupStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IAttributeSetInstanceExtensionFieldGroupStateCreated Map(ICreateAttributeSetInstanceExtensionFieldGroup c)
        {
			var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(c.Id, c.Version);
            IAttributeSetInstanceExtensionFieldGroupStateCreated e = NewAttributeSetInstanceExtensionFieldGroupStateCreated(stateEventId);
		
            e.FieldType = c.FieldType;

            e.FieldLength = c.FieldLength;

            e.FieldCount = c.FieldCount;

            e.NameFormat = c.NameFormat;

            e.Description = c.Description;

            e.Active = c.Active;

            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;
			var version = c.Version;

            foreach (ICreateAttributeSetInstanceExtensionField innerCommand in c.Fields)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IAttributeSetInstanceExtensionFieldStateCreated innerEvent = MapCreate(innerCommand, c, version);
                e.AddAttributeSetInstanceExtensionFieldEvent(innerEvent);
            }


            return e;
        }

        protected virtual IAttributeSetInstanceExtensionFieldGroupStateMergePatched Map(IMergePatchAttributeSetInstanceExtensionFieldGroup c)
        {
			var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(c.Id, c.Version);
            IAttributeSetInstanceExtensionFieldGroupStateMergePatched e = NewAttributeSetInstanceExtensionFieldGroupStateMergePatched(stateEventId);

            e.FieldType = c.FieldType;

            e.FieldLength = c.FieldLength;

            e.FieldCount = c.FieldCount;

            e.NameFormat = c.NameFormat;

            e.Description = c.Description;

            e.Active = c.Active;

            e.IsPropertyFieldTypeRemoved = c.IsPropertyFieldTypeRemoved;

            e.IsPropertyFieldLengthRemoved = c.IsPropertyFieldLengthRemoved;

            e.IsPropertyFieldCountRemoved = c.IsPropertyFieldCountRemoved;

            e.IsPropertyNameFormatRemoved = c.IsPropertyNameFormatRemoved;

            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;

            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;


            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;

			var version = c.Version;

            foreach (IAttributeSetInstanceExtensionFieldCommand innerCommand in c.AttributeSetInstanceExtensionFieldCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IAttributeSetInstanceExtensionFieldStateEvent innerEvent = Map(innerCommand, c, version);
                e.AddAttributeSetInstanceExtensionFieldEvent(innerEvent);
            }


            return e;
        }

        protected virtual IAttributeSetInstanceExtensionFieldGroupStateDeleted Map(IDeleteAttributeSetInstanceExtensionFieldGroup c)
        {
			var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(c.Id, c.Version);
            IAttributeSetInstanceExtensionFieldGroupStateDeleted e = NewAttributeSetInstanceExtensionFieldGroupStateDeleted(stateEventId);
			
            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;


            return e;
        }


        protected void ThrowOnInconsistentCommands(IAttributeSetInstanceExtensionFieldGroupCommand command, IAttributeSetInstanceExtensionFieldCommand innerCommand)
        {
            IAttributeSetInstanceExtensionFieldGroupStateProperties properties =  command as IAttributeSetInstanceExtensionFieldGroupStateProperties ;
            IAttributeSetInstanceExtensionFieldStateProperties innerProperties = innerCommand as IAttributeSetInstanceExtensionFieldStateProperties;
            if (properties == null || innerProperties == null) { return; }
            var outerIdName = "Id";
            var outerIdValue = properties.Id;
            var innerGroupIdName = "GroupId";
            var innerGroupIdValue = innerProperties.GroupId;
            SetNullInnerIdOrThrowOnInconsistentIds(innerProperties, innerGroupIdName, innerGroupIdValue, outerIdName, outerIdValue);

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IAttributeSetInstanceExtensionFieldStateEvent Map(IAttributeSetInstanceExtensionFieldCommand c, IAttributeSetInstanceExtensionFieldGroupCommand outerCommand, long version)
        {
            var create = c as ICreateAttributeSetInstanceExtensionField;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version);
            }

            var merge = c as IMergePatchAttributeSetInstanceExtensionField;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version);
            }

            var remove = c as IRemoveAttributeSetInstanceExtensionField;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IAttributeSetInstanceExtensionFieldStateCreated MapCreate(ICreateAttributeSetInstanceExtensionField c, IAttributeSetInstanceExtensionFieldGroupCommand outerCommand, long version)
        {
            (c as AttributeSetInstanceExtensionFieldCommandBase).RequesterId = (outerCommand as AttributeSetInstanceExtensionFieldGroupCommandBase).RequesterId;
			var stateEventId = new AttributeSetInstanceExtensionFieldStateEventId(c.GroupId, c.Index, version);
            IAttributeSetInstanceExtensionFieldStateCreated e = NewAttributeSetInstanceExtensionFieldStateCreated(stateEventId);

            e.Name = c.Name;

            e.Type = c.Type;

            e.Length = c.Length;

            e.Alias = c.Alias;

            e.Description = c.Description;

            e.Active = c.Active;


            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IAttributeSetInstanceExtensionFieldStateMergePatched MapMergePatch(IMergePatchAttributeSetInstanceExtensionField c, IAttributeSetInstanceExtensionFieldGroupCommand outerCommand, long version)
        {
            (c as AttributeSetInstanceExtensionFieldCommandBase).RequesterId = (outerCommand as AttributeSetInstanceExtensionFieldGroupCommandBase).RequesterId;
			var stateEventId = new AttributeSetInstanceExtensionFieldStateEventId(c.GroupId, c.Index, version);
            IAttributeSetInstanceExtensionFieldStateMergePatched e = NewAttributeSetInstanceExtensionFieldStateMergePatched(stateEventId);

            e.Name = c.Name;

            e.Type = c.Type;

            e.Length = c.Length;

            e.Alias = c.Alias;

            e.Description = c.Description;

            e.Active = c.Active;

            e.IsPropertyNameRemoved = c.IsPropertyNameRemoved;
            e.IsPropertyTypeRemoved = c.IsPropertyTypeRemoved;
            e.IsPropertyLengthRemoved = c.IsPropertyLengthRemoved;
            e.IsPropertyAliasRemoved = c.IsPropertyAliasRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedAt = DateTime.Now;
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IAttributeSetInstanceExtensionFieldStateRemoved MapRemove(IRemoveAttributeSetInstanceExtensionField c, IAttributeSetInstanceExtensionFieldGroupCommand outerCommand, long version)
        {
            (c as AttributeSetInstanceExtensionFieldCommandBase).RequesterId = (outerCommand as AttributeSetInstanceExtensionFieldGroupCommandBase).RequesterId;
			var stateEventId = new AttributeSetInstanceExtensionFieldStateEventId(c.GroupId, c.Index, version);
            IAttributeSetInstanceExtensionFieldStateRemoved e = NewAttributeSetInstanceExtensionFieldStateRemoved(stateEventId);


            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldStateEventBase).CreatedAt = DateTime.Now;

            return e;

        }// END Map(IRemove... ////////////////////////////



        private void SetNullInnerIdOrThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (innerIdValue == null)
            {
                ReflectUtils.SetPropertyValue(innerIdName, innerObject, outerIdValue);
            }
            else if (innerIdValue != outerIdValue)
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected AttributeSetInstanceExtensionFieldGroupStateCreated NewAttributeSetInstanceExtensionFieldGroupStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(this._state.Id, this._state.Version);
            var e = NewAttributeSetInstanceExtensionFieldGroupStateCreated(stateEventId);

            e.CommandId = commandId;

            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }

        protected AttributeSetInstanceExtensionFieldGroupStateMergePatched NewAttributeSetInstanceExtensionFieldGroupStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(this._state.Id, this._state.Version);
            var e = NewAttributeSetInstanceExtensionFieldGroupStateMergePatched(stateEventId);

            e.CommandId = commandId;

            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }


        protected AttributeSetInstanceExtensionFieldGroupStateDeleted NewAttributeSetInstanceExtensionFieldGroupStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new AttributeSetInstanceExtensionFieldGroupStateEventId(this._state.Id, this._state.Version);
            var e = NewAttributeSetInstanceExtensionFieldGroupStateDeleted(stateEventId);

            e.CommandId = commandId;

            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeSetInstanceExtensionFieldGroupStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private AttributeSetInstanceExtensionFieldGroupStateCreated NewAttributeSetInstanceExtensionFieldGroupStateCreated(AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldGroupStateCreated(stateEventId);			
		}

        private AttributeSetInstanceExtensionFieldGroupStateMergePatched NewAttributeSetInstanceExtensionFieldGroupStateMergePatched(AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldGroupStateMergePatched(stateEventId);
		}

        private AttributeSetInstanceExtensionFieldGroupStateDeleted NewAttributeSetInstanceExtensionFieldGroupStateDeleted(AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldGroupStateDeleted(stateEventId);
		}


		private AttributeSetInstanceExtensionFieldStateCreated NewAttributeSetInstanceExtensionFieldStateCreated(AttributeSetInstanceExtensionFieldStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldStateCreated(stateEventId);
		}

        private AttributeSetInstanceExtensionFieldStateMergePatched NewAttributeSetInstanceExtensionFieldStateMergePatched(AttributeSetInstanceExtensionFieldStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldStateMergePatched(stateEventId);
		}

        private AttributeSetInstanceExtensionFieldStateRemoved NewAttributeSetInstanceExtensionFieldStateRemoved(AttributeSetInstanceExtensionFieldStateEventId stateEventId)
		{
			return new AttributeSetInstanceExtensionFieldStateRemoved(stateEventId);
		}


    }

}

