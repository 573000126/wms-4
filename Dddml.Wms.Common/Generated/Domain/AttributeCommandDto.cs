// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public abstract class AttributeCommandDtoBase : ICommandDto, ICreateAttribute, IMergePatchAttribute, IDeleteAttribute
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return (this as IAttributeStateProperties).AttributeId;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string AttributeId { get; set; }

		public virtual string Name { get; set; }

		public virtual string OrganizationId { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? IsMandatory { get; set; }

        bool IAttributeStateProperties.IsMandatory
        {
            get 
            {
                var b = this.IsMandatory;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsMandatory = value;
            }
        }

		public virtual bool? IsInstanceAttribute { get; set; }

        bool IAttributeStateProperties.IsInstanceAttribute
        {
            get 
            {
                var b = this.IsInstanceAttribute;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsInstanceAttribute = value;
            }
        }

		public virtual string AttributeValueType { get; set; }

		public virtual int? AttributeValueLength { get; set; }

		public virtual bool? IsList { get; set; }

        bool IAttributeStateProperties.IsList
        {
            get 
            {
                var b = this.IsList;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsList = value;
            }
        }

		public virtual string FieldName { get; set; }

		public virtual string ReferenceId { get; set; }

		public virtual bool? Active { get; set; }

        bool IAttributeStateProperties.Active
        {
            get 
            {
                var b = this.Active;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.Active = value;
            }
        }

		public virtual bool? IsPropertyNameRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyNameRemoved
        {
            get
            {
                var b = this.IsPropertyNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyOrganizationIdRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyOrganizationIdRemoved
        {
            get
            {
                var b = this.IsPropertyOrganizationIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOrganizationIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsMandatoryRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyIsMandatoryRemoved
        {
            get
            {
                var b = this.IsPropertyIsMandatoryRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsMandatoryRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsInstanceAttributeRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyIsInstanceAttributeRemoved
        {
            get
            {
                var b = this.IsPropertyIsInstanceAttributeRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsInstanceAttributeRemoved = value;
            }
        }

		public virtual bool? IsPropertyAttributeValueTypeRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyAttributeValueTypeRemoved
        {
            get
            {
                var b = this.IsPropertyAttributeValueTypeRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyAttributeValueTypeRemoved = value;
            }
        }

		public virtual bool? IsPropertyAttributeValueLengthRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyAttributeValueLengthRemoved
        {
            get
            {
                var b = this.IsPropertyAttributeValueLengthRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyAttributeValueLengthRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsListRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyIsListRemoved
        {
            get
            {
                var b = this.IsPropertyIsListRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsListRemoved = value;
            }
        }

		public virtual bool? IsPropertyFieldNameRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyFieldNameRemoved
        {
            get
            {
                var b = this.IsPropertyFieldNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyFieldNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyReferenceIdRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyReferenceIdRemoved
        {
            get
            {
                var b = this.IsPropertyReferenceIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyReferenceIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchAttribute.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

        ICreateAttributeValueCommands ICreateAttribute.AttributeValues
        {
            get
            {
                return this._attributeValues;
            }
        }

        IAttributeValueCommands IMergePatchAttribute.AttributeValueCommands
        {
            get
            {
                return this._attributeValues;
            }
        }

        public virtual CreateAttributeValueDto NewCreateAttributeValue()
        {
            var c = new CreateAttributeValueDto();
            c.AttributeId = this.AttributeId;

            return c;
        }

        ICreateAttributeValue ICreateAttribute.NewCreateAttributeValue()
        {
            return this.NewCreateAttributeValue();
        }

        ICreateAttributeValue IMergePatchAttribute.NewCreateAttributeValue()
        {
            return this.NewCreateAttributeValue();
        }

        public virtual MergePatchAttributeValueDto NewMergePatchAttributeValue()
        {
            var c = new MergePatchAttributeValueDto();
            c.AttributeId = this.AttributeId;

            return c;
        }

        IMergePatchAttributeValue IMergePatchAttribute.NewMergePatchAttributeValue()
        {
            return this.NewMergePatchAttributeValue();
        }

        public virtual RemoveAttributeValueDto NewRemoveAttributeValue()
        {
            var c = new RemoveAttributeValueDto();
            c.AttributeId = this.AttributeId;

            return c;
        }

        IRemoveAttributeValue IMergePatchAttribute.NewRemoveAttributeValue()
        {
            return this.NewRemoveAttributeValue();
        }

        private CreateOrMergePatchOrRemoveAttributeValueDtos _attributeValues = new CreateOrMergePatchOrRemoveAttributeValueDtos();

        public virtual CreateOrMergePatchOrRemoveAttributeValueDto[] AttributeValues
        {
            get
            {
                return _attributeValues.ToArray();
            }
            set
            {
                _attributeValues.Clear();
                _attributeValues.AddRange(value);
            }
        }


        // //////////////////////////////////////////////

        private IAttributeCommand _innerCommand;

        public virtual ICommand ToCommand()
        {
            //if (this._innerCommand != null)
            //{
                //return this._innerCommand;
            //}
            var cmdType = GetCommandType();
            if (cmdType == CommandType.Create)
            {
                var cmd = ToCreateAttribute();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.MergePatch)
            {
                var cmd = ToMergePatchAttribute();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.Delete)
            {
                var cmd = ToDeleteAttribute();
                this._innerCommand = cmd;
            }
            else
            {
                throw DomainError.Named("invalidCommandType", String.Format("Invalid command type: {0}", cmdType));
            }
            return this._innerCommand;
        }

        internal DeleteAttribute ToDeleteAttribute()
        {
            var cmd = new DeleteAttribute();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.AttributeId = (this as IAttributeStateProperties).AttributeId;
            cmd.Version = this.Version;

            return cmd;
        }

        internal MergePatchAttribute ToMergePatchAttribute()
        {
            var cmd = new MergePatchAttribute();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.Version = this.Version;

            cmd.AttributeId = (this as IAttributeStateProperties).AttributeId;
            cmd.Name = (this as IAttributeStateProperties).Name;
            cmd.OrganizationId = (this as IAttributeStateProperties).OrganizationId;
            cmd.Description = (this as IAttributeStateProperties).Description;
            cmd.IsMandatory = (this as IAttributeStateProperties).IsMandatory;
            cmd.IsInstanceAttribute = (this as IAttributeStateProperties).IsInstanceAttribute;
            cmd.AttributeValueType = (this as IAttributeStateProperties).AttributeValueType;
            cmd.AttributeValueLength = (this as IAttributeStateProperties).AttributeValueLength;
            cmd.IsList = (this as IAttributeStateProperties).IsList;
            cmd.FieldName = (this as IAttributeStateProperties).FieldName;
            cmd.ReferenceId = (this as IAttributeStateProperties).ReferenceId;
            cmd.Active = (this as IAttributeStateProperties).Active;
            
            cmd.IsPropertyNameRemoved = (this as IMergePatchAttribute).IsPropertyNameRemoved;
            cmd.IsPropertyOrganizationIdRemoved = (this as IMergePatchAttribute).IsPropertyOrganizationIdRemoved;
            cmd.IsPropertyDescriptionRemoved = (this as IMergePatchAttribute).IsPropertyDescriptionRemoved;
            cmd.IsPropertyIsMandatoryRemoved = (this as IMergePatchAttribute).IsPropertyIsMandatoryRemoved;
            cmd.IsPropertyIsInstanceAttributeRemoved = (this as IMergePatchAttribute).IsPropertyIsInstanceAttributeRemoved;
            cmd.IsPropertyAttributeValueTypeRemoved = (this as IMergePatchAttribute).IsPropertyAttributeValueTypeRemoved;
            cmd.IsPropertyAttributeValueLengthRemoved = (this as IMergePatchAttribute).IsPropertyAttributeValueLengthRemoved;
            cmd.IsPropertyIsListRemoved = (this as IMergePatchAttribute).IsPropertyIsListRemoved;
            cmd.IsPropertyFieldNameRemoved = (this as IMergePatchAttribute).IsPropertyFieldNameRemoved;
            cmd.IsPropertyReferenceIdRemoved = (this as IMergePatchAttribute).IsPropertyReferenceIdRemoved;
            cmd.IsPropertyActiveRemoved = (this as IMergePatchAttribute).IsPropertyActiveRemoved;
            foreach (var d in (IEnumerable<CreateOrMergePatchOrRemoveAttributeValueDto>)_attributeValues)
            {
                var c = (IAttributeValueCommand)d.ToCommand();
                cmd.AttributeValueCommands.Add(c);
            }
            return cmd;
        }

        internal CreateAttribute ToCreateAttribute()
        {
            var cmd = new CreateAttribute();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.Version = this.Version;

            cmd.AttributeId = (this as IAttributeStateProperties).AttributeId;
            cmd.Name = (this as IAttributeStateProperties).Name;
            cmd.OrganizationId = (this as IAttributeStateProperties).OrganizationId;
            cmd.Description = (this as IAttributeStateProperties).Description;
            cmd.IsMandatory = (this as IAttributeStateProperties).IsMandatory;
            cmd.IsInstanceAttribute = (this as IAttributeStateProperties).IsInstanceAttribute;
            cmd.AttributeValueType = (this as IAttributeStateProperties).AttributeValueType;
            cmd.AttributeValueLength = (this as IAttributeStateProperties).AttributeValueLength;
            cmd.IsList = (this as IAttributeStateProperties).IsList;
            cmd.FieldName = (this as IAttributeStateProperties).FieldName;
            cmd.ReferenceId = (this as IAttributeStateProperties).ReferenceId;
            cmd.Active = (this as IAttributeStateProperties).Active;
            foreach (var d in (IEnumerable<CreateOrMergePatchOrRemoveAttributeValueDto>)_attributeValues)
            {
                var c = d.ToCreateAttributeValue();
                cmd.AttributeValues.Add(c);
            }
            return cmd;
        }

        // //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteAttributeDto : AttributeCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateAttributeDto : CreateOrMergePatchOrDeleteAttributeDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchAttributeDto : CreateOrMergePatchOrDeleteAttributeDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteAttributeDto : CreateOrMergePatchOrDeleteAttributeDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}





}

