// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;
using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public partial class AttributeSetInstanceStateDto : StateDtoBase, IAttributeSetInstanceState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private AttributeSetInstanceState _state;

        public AttributeSetInstanceStateDto()
        {
            this._state = new AttributeSetInstanceState();
        }

		public AttributeSetInstanceStateDto(AttributeSetInstanceState state)
		{
            this._state = state;
		}

		internal AttributeSetInstanceState ToAttributeSetInstanceState()
		{
			return this._state;
		}

		public virtual string AttributeSetInstanceId
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("AttributeSetInstanceId"))
                {
                    return _state.AttributeSetInstanceId;
                }
                return null;
            }
            set
            {
                _state.AttributeSetInstanceId = value;
            }
        }

        string IAttributeSetInstanceStateProperties.AttributeSetInstanceId
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).AttributeSetInstanceId;
            }
            set 
            {
                this._state.AttributeSetInstanceId = value;
            }
        }

		public virtual string AttributeSetId
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("AttributeSetId"))
                {
                    return _state.AttributeSetId;
                }
                return null;
            }
            set
            {
                _state.AttributeSetId = value;
            }
        }

        string IAttributeSetInstanceStateProperties.AttributeSetId
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).AttributeSetId;
            }
            set 
            {
                this._state.AttributeSetId = value;
            }
        }

		public virtual string SerialNumber
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("SerialNumber"))
                {
                    return _state.SerialNumber;
                }
                return null;
            }
            set
            {
                _state.SerialNumber = value;
            }
        }

        string IAttributeSetInstanceStateProperties.SerialNumber
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).SerialNumber;
            }
            set 
            {
                this._state.SerialNumber = value;
            }
        }

		public virtual string Lot
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Lot"))
                {
                    return _state.Lot;
                }
                return null;
            }
            set
            {
                _state.Lot = value;
            }
        }

        string IAttributeSetInstanceStateProperties.Lot
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).Lot;
            }
            set 
            {
                this._state.Lot = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IAttributeSetInstanceStateProperties.Description
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).Description;
            }
            set 
            {
                this._state.Description = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Active"))
                {
                    return _state.Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Active = value.Value;
                }
            }
        }

        bool IAttributeSetInstanceStateProperties.Active
        {
            get 
            {
                return (this._state as IAttributeSetInstanceStateProperties).Active;
            }
            set 
            {
                this._state.Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Version"))
                {
                    return _state.Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Version = value.Value;
                }
            }
        }
		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IAttributeSetInstanceState).GlobalId; }
		}

		#endregion


		#region IActive implementation

		bool IActive.Active
		{
            get { return (_state as IActive).Active; }
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IAttributeSetInstanceState).CreatedBy; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IAttributeSetInstanceState).CreatedAt; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IAttributeSetInstanceState).UpdatedBy; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IAttributeSetInstanceState).UpdatedAt; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
            get { return (_state as IAttributeSetInstanceState).Version; }
		}


		#endregion



		void IAttributeSetInstanceState.When(IAttributeSetInstanceStateCreated e)
		{
            throw new NotSupportedException();
		}


		void IAttributeSetInstanceState.When(IAttributeSetInstanceStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IAttributeSetInstanceState.When(IAttributeSetInstanceStateDeleted e)
		{
            throw new NotSupportedException();
		}


		void IAttributeSetInstanceState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


	}

    partial class AttributeSetInstanceStateDtoCollection : StateDtoCollectionBase<AttributeSetInstanceStateDto>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(AttributeSetInstanceStateDto._collectionFieldNames, fieldName);
        }

    }

}

