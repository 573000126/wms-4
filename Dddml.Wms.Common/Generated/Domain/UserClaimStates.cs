// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class UserClaimStates : IUserClaimStates
    {
        
		protected IUserClaimStateDao UserClaimStateDao
		{
			get
			{
				return ApplicationContext.Current["UserClaimStateDao"] as IUserClaimStateDao;
			}
		}

		private Dictionary<UserClaimId, IUserClaimState> _loadedUserClaimStates = new Dictionary<UserClaimId, IUserClaimState>();

        private List<IUserClaimState> _removedUserClaimStates = new List<IUserClaimState>();

		protected virtual IEnumerable<IUserClaimState> LoadedUserClaimStates {
			get {
				return this._loadedUserClaimStates.Values;
			}
		}

        private IUserState _userState;

        private IEnumerable<IUserClaimState> _innerEnumerable;

        private IEnumerable<IUserClaimState> InnerEnumeralbe
        {
            get
            {
                if (_innerEnumerable == null)
                {
                    _innerEnumerable = UserClaimStateDao.FindByUserId(_userState.UserId);
                }
                return _innerEnumerable;
            }
        }

        public UserClaimStates(IUserState outerState)
        {
            this._userState = outerState;
        }

        public IEnumerator<IUserClaimState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IUserClaimState state)
        {
            this._removedUserClaimStates.Add(state);
        }

        public virtual IUserClaimState Get(int claimId)
		{
			UserClaimId globalId = new UserClaimId(_userState.UserId, claimId);
            if (_loadedUserClaimStates.ContainsKey(globalId)) {
                return _loadedUserClaimStates[globalId];
            }
            var state = UserClaimStateDao.Get(globalId);
			_loadedUserClaimStates.Add (globalId, state);
			return state;
		}

        public virtual void AddToSave(IUserClaimState state)
        {
            this._loadedUserClaimStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IUserClaimState s in this.LoadedUserClaimStates) {
                UserClaimStateDao.Save(s);
			}
            foreach(IUserClaimState s in this._removedUserClaimStates)
            {
                UserClaimStateDao.Delete(s);
            }
		}

		#endregion


    }



}


