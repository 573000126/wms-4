// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;
using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public abstract class AttributeUseCommandDtoBase : ICommandDto, ICreateAttributeUse, IMergePatchAttributeUse, IRemoveAttributeUse
	{

		public virtual string RequesterId { get; set; }//TODO RequesterId 应该是可以支持自定义名称

		public virtual string CommandId { get; set; }//TODO CommandId 太特殊了！！！应该可以支持自定义名称（即不一定要叫 CommandId）

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string AttributeId { get; set; }

		public virtual int? SequenceNumber { get; set; }

        int IAttributeUseStateProperties.SequenceNumber
        {
            get 
            {
                var b = this.SequenceNumber;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(int);
            }
            set 
            {
                this.SequenceNumber = value;
            }
        }

		public virtual bool? Active { get; set; }

        bool IAttributeUseStateProperties.Active
        {
            get 
            {
                var b = this.Active;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.Active = value;
            }
        }

		public virtual string AttributeSetId { get; set; }

		public virtual bool? IsPropertySequenceNumberRemoved { get; set; }

        bool IMergePatchAttributeUse.IsPropertySequenceNumberRemoved
        {
            get
            {
                var b = this.IsPropertySequenceNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertySequenceNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchAttributeUse.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        // //////////////////////////////////////////////

        private IAttributeUseCommand _innerCommand;

        public virtual ICommand ToCommand()
        {
            //if (this._innerCommand != null)
            //{
                //return this._innerCommand;
            //}
            var cmdType = GetCommandType();
            if (cmdType == CommandType.Create)
            {
                var cmd = ToCreateAttributeUse();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.MergePatch)
            {
                var cmd = ToMergePatchAttributeUse();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.Remove)
            {
                var cmd = ToRemoveAttributeUse();
                this._innerCommand = cmd;
            }
            else
            {
                throw DomainError.Named("invalidCommandType", String.Format("Invalid command type: {0}", cmdType));
            }
            return this._innerCommand;
        }

        private RemoveAttributeUse ToRemoveAttributeUse()
        {
            var cmd = new RemoveAttributeUse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.AttributeId = (this as IAttributeUseStateProperties).AttributeId;
            return cmd;
        }

        internal MergePatchAttributeUse ToMergePatchAttributeUse()
        {
            var cmd = new MergePatchAttributeUse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.AttributeId = (this as IAttributeUseStateProperties).AttributeId;
            cmd.SequenceNumber = (this as IAttributeUseStateProperties).SequenceNumber;
            cmd.Active = (this as IAttributeUseStateProperties).Active;
            cmd.AttributeSetId = (this as IAttributeUseStateProperties).AttributeSetId;
            
            cmd.IsPropertySequenceNumberRemoved = (this as IMergePatchAttributeUse).IsPropertySequenceNumberRemoved;
            cmd.IsPropertyActiveRemoved = (this as IMergePatchAttributeUse).IsPropertyActiveRemoved;
            return cmd;
        }

        internal CreateAttributeUse ToCreateAttributeUse()
        {
            var cmd = new CreateAttributeUse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.AttributeId = (this as IAttributeUseStateProperties).AttributeId;
            cmd.SequenceNumber = (this as IAttributeUseStateProperties).SequenceNumber;
            cmd.Active = (this as IAttributeUseStateProperties).Active;
            cmd.AttributeSetId = (this as IAttributeUseStateProperties).AttributeSetId;
            return cmd;
        }

        // //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrRemoveAttributeUseDto : AttributeUseCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            //TODO (Command Type）的名称应该允许自定义
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateAttributeUseDto : CreateOrMergePatchOrRemoveAttributeUseDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				//base.CommandType = value; 
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchAttributeUseDto : CreateOrMergePatchOrRemoveAttributeUseDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				//base.CommandType = value; 
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class RemoveAttributeUseDto : CreateOrMergePatchOrRemoveAttributeUseDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Remove;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				//base.CommandType = value; 
            }
        }

	}


    public partial class CreateOrMergePatchOrRemoveAttributeUseDtos : IAttributeUseCommands, ICreateAttributeUseCommands, IEnumerable<CreateOrMergePatchOrRemoveAttributeUseDto>
    {
        private List<CreateOrMergePatchOrRemoveAttributeUseDto> _innerCommands = new List<CreateOrMergePatchOrRemoveAttributeUseDto>();

        public virtual CreateOrMergePatchOrRemoveAttributeUseDto[] ToArray()
        {
            return _innerCommands.ToArray();
        }

        public virtual void Clear()
        {
            _innerCommands.Clear();
        }

        public virtual void AddRange(IEnumerable<CreateOrMergePatchOrRemoveAttributeUseDto> cs)
        {
            _innerCommands.AddRange(cs);
        }

        void IAttributeUseCommands.Add(IAttributeUseCommand c)
        {
            _innerCommands.Add((CreateOrMergePatchOrRemoveAttributeUseDto)c);
        }

        void IAttributeUseCommands.Remove(IAttributeUseCommand c)
        {
            _innerCommands.Remove((CreateOrMergePatchOrRemoveAttributeUseDto)c);
        }


        IEnumerator<CreateOrMergePatchOrRemoveAttributeUseDto> IEnumerable<CreateOrMergePatchOrRemoveAttributeUseDto>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        IEnumerator<IAttributeUseCommand> IEnumerable<IAttributeUseCommand>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        void ICreateAttributeUseCommands.Add(ICreateAttributeUse c)
        {
            _innerCommands.Add((CreateAttributeUseDto)c);
        }

        void ICreateAttributeUseCommands.Remove(ICreateAttributeUse c)
        {
            _innerCommands.Remove((CreateAttributeUseDto)c);
        }

        IEnumerator<ICreateAttributeUse> IEnumerable<ICreateAttributeUse>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }






}

