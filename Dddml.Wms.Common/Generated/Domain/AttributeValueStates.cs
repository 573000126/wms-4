// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class AttributeValueStates : IAttributeValueStates
    {
        
		protected IAttributeValueStateDao AttributeValueStateDao
		{
			get
			{
				return ApplicationContext.Current["AttributeValueStateDao"] as IAttributeValueStateDao;
			}
		}

		private Dictionary<AttributeValueId, IAttributeValueState> _loadedAttributeValueStates = new Dictionary<AttributeValueId, IAttributeValueState>();

        private List<IAttributeValueState> _removedAttributeValueStates = new List<IAttributeValueState>();

		protected virtual IEnumerable<IAttributeValueState> LoadedAttributeValueStates {
			get {
				return this._loadedAttributeValueStates.Values;
			}
		}

        private IAttributeState _attributeState;

        private IEnumerable<IAttributeValueState> _innerEnumerable;

        private IEnumerable<IAttributeValueState> InnerEnumeralbe
        {
            get
            {
                if (_innerEnumerable == null)
                {
                    _innerEnumerable = AttributeValueStateDao.FindByAttributeId(_attributeState.AttributeId);
                }
                return _innerEnumerable;
            }
        }

        public AttributeValueStates(IAttributeState outerState)
        {
            this._attributeState = outerState;
        }

        public IEnumerator<IAttributeValueState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IAttributeValueState state)
        {
            this._removedAttributeValueStates.Add(state);
        }

        public virtual IAttributeValueState Get(string value)
		{
			AttributeValueId globalId = new AttributeValueId(_attributeState.AttributeId, value);
            if (_loadedAttributeValueStates.ContainsKey(globalId)) {
                return _loadedAttributeValueStates[globalId];
            }
            var state = AttributeValueStateDao.Get(globalId);
			_loadedAttributeValueStates.Add (globalId, state);
			return state;
		}

        public virtual void AddToSave(IAttributeValueState state)
        {
            this._loadedAttributeValueStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IAttributeValueState s in this.LoadedAttributeValueStates) {
                AttributeValueStateDao.Save(s);
			}
            foreach(IAttributeValueState s in this._removedAttributeValueStates)
            {
                AttributeValueStateDao.Delete(s);
            }
		}

		#endregion


    }



}


