// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Support.Criterion;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public abstract partial class AttributeSetInstanceExtensionFieldGroupApplicationServiceBase : IAttributeSetInstanceExtensionFieldGroupApplicationService, IApplicationService
	{
		protected abstract IEventStore EventStore { get; }

		protected abstract IAttributeSetInstanceExtensionFieldGroupStateRepository StateRepository { get; }

		protected AttributeSetInstanceExtensionFieldGroupApplicationServiceBase()
		{
		}

		protected virtual void Update(IAttributeSetInstanceExtensionFieldGroupCommand c, Action<IAttributeSetInstanceExtensionFieldGroupAggregate> action)
		{
			var aggregateId = c.AggregateId;
			var state = StateRepository.Get(aggregateId);
			var aggregate = GetAttributeSetInstanceExtensionFieldGroupAggregate(state);

			var eventStoreAaggregateId = ToEventStoreAaggregateId(aggregateId);

			var repeated = IsRepeatedCommand(c, eventStoreAaggregateId, state);
			if (repeated) { return; }

			aggregate.ThrowOnInvalidStateTransition(c);
			action(aggregate);
			EventStore.AppendEvents(ToEventStoreAaggregateId(aggregateId), state.Version, aggregate.Changes, () => { StateRepository.Save(state); });
		}


		protected bool IsRepeatedCommand(IAttributeSetInstanceExtensionFieldGroupCommand command, IEventStoreAggregateId eventStoreAaggregateId, IAttributeSetInstanceExtensionFieldGroupState state)
		{
			bool repeated = false;
			if (state.Version > command.AggregateVersion)
			{
				var lastEvent = EventStore.FindLastEvent(typeof(IAttributeSetInstanceExtensionFieldGroupStateEvent), eventStoreAaggregateId, command.AggregateVersion);
				if (lastEvent != null && lastEvent.CommandId == command.CommandId)
				{
					repeated = true;
				}
			}
			return repeated;
		}


		public virtual void Execute(object command)
		{
			((dynamic)this).When((dynamic)command);
		}


		public virtual void When(ICreateAttributeSetInstanceExtensionFieldGroup c)
		{
			Update(c, ar => ar.Create(c));
		}

		public virtual void When(IMergePatchAttributeSetInstanceExtensionFieldGroup c)
		{
			Update(c, ar => ar.MergePatch(c));
		}

		public virtual void When(IDeleteAttributeSetInstanceExtensionFieldGroup c)
		{
			Update(c, ar => ar.Delete(c));
		}

 		public virtual IAttributeSetInstanceExtensionFieldGroupState Get(string id)
		{
            var state = StateRepository.Get(id);
			return state;
		}

        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldGroupState> GetAll(int firstResult, int maxResults)
		{
            var states = StateRepository.GetAll(firstResult, maxResults);
			return states;
		}

        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldGroupState> Get(IDictionary<string, object> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
		{
            var states = StateRepository.Get(filter, orders, firstResult, maxResults);
			return states;
		}

        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldGroupState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
		{
            var states = StateRepository.Get(filter, orders, firstResult, maxResults);
			return states;
		}

	    public virtual IAttributeSetInstanceExtensionFieldGroupStateEvent GetStateEvent(string id, long version)
        {
            return (IAttributeSetInstanceExtensionFieldGroupStateEvent)EventStore.GetStateEvent(ToEventStoreAaggregateId(id), version);
        }


		public abstract IAttributeSetInstanceExtensionFieldGroupAggregate GetAttributeSetInstanceExtensionFieldGroupAggregate(IAttributeSetInstanceExtensionFieldGroupState state);

		public abstract IEventStoreAggregateId ToEventStoreAaggregateId(string aggregateId);


	}

}

