// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class WarehouseCommandDtoBase : ICommandDto, ICreateWarehouse, IMergePatchWarehouse, IDeleteWarehouse
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteWarehouse)this).WarehouseId;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string WarehouseId { get; set; }

		public virtual string Name { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? Active { get; set; }

		public virtual bool? IsPropertyNameRemoved { get; set; }

        bool IMergePatchWarehouse.IsPropertyNameRemoved
        {
            get
            {
                var b = this.IsPropertyNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchWarehouse.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsInTransitRemoved { get; set; }

        bool IMergePatchWarehouse.IsPropertyIsInTransitRemoved
        {
            get
            {
                var b = this.IsPropertyIsInTransitRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsInTransitRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchWarehouse.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        // //////////////////////////////////////////////
/*
        private IWarehouseCommand _innerCommand;

        internal ICommand ToCommand()
        {
            //if (this._innerCommand != null)
            //{
            //    return this._innerCommand;
            //}
            var cmdType = GetCommandType();
            if (cmdType == CommandType.Create)
            {
                var cmd = ToCreateWarehouse();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.MergePatch)
            {
                var cmd = ToMergePatchWarehouse();
                this._innerCommand = cmd;
            }
            else if (cmdType == CommandType.Delete)
            {
                var cmd = ToDeleteWarehouse();
                this._innerCommand = cmd;
            }
            else
            {
                throw DomainError.Named("invalidCommandType", String.Format("Invalid command type: {0}", cmdType));
            }
            return this._innerCommand;
        }

        internal DeleteWarehouse ToDeleteWarehouse()
        {
            var cmd = new DeleteWarehouse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.WarehouseId = ((ICreateOrMergePatchOrDeleteWarehouse)this).WarehouseId;
            cmd.Version = this.Version;

            return cmd;
        }

        internal MergePatchWarehouse ToMergePatchWarehouse()
        {
            var cmd = new MergePatchWarehouse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.Version = this.Version;

            cmd.WarehouseId = ((ICreateOrMergePatchOrDeleteWarehouse)this).WarehouseId;
            cmd.Name = ((ICreateOrMergePatchOrDeleteWarehouse)this).Name;
            cmd.Description = ((ICreateOrMergePatchOrDeleteWarehouse)this).Description;
            cmd.IsInTransit = ((ICreateOrMergePatchOrDeleteWarehouse)this).IsInTransit;
            cmd.Active = ((ICreateOrMergePatchOrDeleteWarehouse)this).Active;
            
            cmd.IsPropertyNameRemoved = (this as IMergePatchWarehouse).IsPropertyNameRemoved;
            cmd.IsPropertyDescriptionRemoved = (this as IMergePatchWarehouse).IsPropertyDescriptionRemoved;
            cmd.IsPropertyIsInTransitRemoved = (this as IMergePatchWarehouse).IsPropertyIsInTransitRemoved;
            cmd.IsPropertyActiveRemoved = (this as IMergePatchWarehouse).IsPropertyActiveRemoved;
            return cmd;
        }

        internal CreateWarehouse ToCreateWarehouse()
        {
            var cmd = new CreateWarehouse();
            cmd.CommandId = this.CommandId;
            cmd.RequesterId = this.RequesterId;

            cmd.Version = this.Version;

            cmd.WarehouseId = ((ICreateOrMergePatchOrDeleteWarehouse)this).WarehouseId;
            cmd.Name = ((ICreateOrMergePatchOrDeleteWarehouse)this).Name;
            cmd.Description = ((ICreateOrMergePatchOrDeleteWarehouse)this).Description;
            cmd.IsInTransit = ((ICreateOrMergePatchOrDeleteWarehouse)this).IsInTransit;
            cmd.Active = ((ICreateOrMergePatchOrDeleteWarehouse)this).Active;
            return cmd;
        }
*/
        // //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteWarehouseDto : WarehouseCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateWarehouseDto : CreateOrMergePatchOrDeleteWarehouseDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchWarehouseDto : CreateOrMergePatchOrDeleteWarehouseDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteWarehouseDto : CreateOrMergePatchOrDeleteWarehouseDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}





}

