// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class UserRoleStates : IUserRoleStates
    {
        
		protected IUserRoleStateDao UserRoleStateDao
		{
			get
			{
				return ApplicationContext.Current["UserRoleStateDao"] as IUserRoleStateDao;
			}
		}

		private Dictionary<UserRoleId, IUserRoleState> _loadedUserRoleStates = new Dictionary<UserRoleId, IUserRoleState>();

        private List<IUserRoleState> _removedUserRoleStates = new List<IUserRoleState>();

		protected virtual IEnumerable<IUserRoleState> LoadedUserRoleStates {
			get {
				return this._loadedUserRoleStates.Values;
			}
		}

        private IUserState _userState;

        private IEnumerable<IUserRoleState> _innerEnumerable;

        private IEnumerable<IUserRoleState> InnerEnumeralbe
        {
            get
            {
                if (_innerEnumerable == null)
                {
                    _innerEnumerable = UserRoleStateDao.FindByUserId(_userState.UserId);
                }
                return _innerEnumerable;
            }
        }

        public UserRoleStates(IUserState outerState)
        {
            this._userState = outerState;
        }

        public IEnumerator<IUserRoleState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IUserRoleState state)
        {
            this._removedUserRoleStates.Add(state);
        }

        public virtual IUserRoleState Get(string roleId)
		{
			UserRoleId globalId = new UserRoleId(_userState.UserId, roleId);
            if (_loadedUserRoleStates.ContainsKey(globalId)) {
                return _loadedUserRoleStates[globalId];
            }
            var state = UserRoleStateDao.Get(globalId);
			_loadedUserRoleStates.Add (globalId, state);
			return state;
		}

        public virtual void AddToSave(IUserRoleState state)
        {
            this._loadedUserRoleStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IUserRoleState s in this.LoadedUserRoleStates) {
                UserRoleStateDao.Save(s);
			}
            foreach(IUserRoleState s in this._removedUserRoleStates)
            {
                UserRoleStateDao.Delete(s);
            }
		}

		#endregion


    }



}


