// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

	public partial class AttributeValueState : AttributeValueStateProperties, IAttributeValueState
	{

		public virtual long Version { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }



		#region IIdentity implementation

        private AttributeValueId _attributeValueId = new AttributeValueId();

        public virtual AttributeValueId AttributeValueId 
        {
            get { return this._attributeValueId; }
            set { this._attributeValueId = value; }
        }

		AttributeValueId IGlobalIdentity<AttributeValueId>.GlobalId {
			get {
				return  this.AttributeValueId;
			}
		}

        string ILocalIdentity<string>.LocalId
        {
            get
            {
                return this.Value;
            }
        }


        public override string AttributeId {
			get {
				return this.AttributeValueId.AttributeId;
			}
			set {
				this.AttributeValueId.AttributeId = value;
			}
		}

        public override string Value {
			get {
				return this.AttributeValueId.AttributeValueValue;
			}
			set {
				this.AttributeValueId.AttributeValueValue = value;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion


		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get
			{
				return this.UpdatedBy;
			}
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get
			{
				return this.UpdatedAt;
			}
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


		public AttributeValueState ()
		{
		}



		public virtual void When(IAttributeValueStateCreated e)
		{
			ThrowOnWrongEvent(e);
			ReflectUtils.CopyPropertyValue("Name", e, this);
			ReflectUtils.CopyPropertyValue("Description", e, this);
			ReflectUtils.CopyPropertyValue("ReferenceId", e, this);
			ReflectUtils.CopyPropertyValue("Active", e, this);
			ReflectUtils.SetPropertyValue("CreatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("CreatedAt", this, e.CreatedAt);


		}


		public virtual void When(IAttributeValueStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.IsPropertyNameRemoved)
			{
				ReflectUtils.SetPropertyValue("Name", this, default(string));
			}
			else
			{
				if (e.Name != null)
				{
					ReflectUtils.CopyPropertyValue("Name", e, this);
				}
			}
			if (e.IsPropertyDescriptionRemoved)
			{
				ReflectUtils.SetPropertyValue("Description", this, default(string));
			}
			else
			{
				if (e.Description != null)
				{
					ReflectUtils.CopyPropertyValue("Description", e, this);
				}
			}
			if (e.IsPropertyReferenceIdRemoved)
			{
				ReflectUtils.SetPropertyValue("ReferenceId", this, default(string));
			}
			else
			{
				if (e.ReferenceId != null)
				{
					ReflectUtils.CopyPropertyValue("ReferenceId", e, this);
				}
			}
			if (e.IsPropertyActiveRemoved)
			{
				ReflectUtils.SetPropertyValue("Active", this, default(bool));
			}
			else
			{
				if (e.Active != null)
				{
					ReflectUtils.CopyPropertyValue("Active", e, this);
				}
			}

			ReflectUtils.SetPropertyValue("UpdatedBy", this, e.CreatedBy);
			ReflectUtils.SetPropertyValue("UpdatedAt", this, e.CreatedAt);


		}


		public virtual void Mutate(IEvent e)
		{
			((dynamic)this).When((dynamic)e);
		}

		protected void ThrowOnWrongEvent(IAttributeValueStateEvent stateEvent)
		{
				var stateEntityIdAttributeId = (this as IGlobalIdentity<AttributeValueId>).GlobalId.AttributeId;
				var eventEntityIdAttributeId = stateEvent.StateEventId.AttributeId;
				if (stateEntityIdAttributeId != eventEntityIdAttributeId)
				{
					DomainError.Named("mutateWrongEntity", "Entity Id AttributeId {0} in state but entity id AttributeId {1} in event", stateEntityIdAttributeId, eventEntityIdAttributeId);
				}
				var stateEntityIdAttributeValueValue = (this as IGlobalIdentity<AttributeValueId>).GlobalId.AttributeValueValue;
				var eventEntityIdAttributeValueValue = stateEvent.StateEventId.AttributeValueValue;
				if (stateEntityIdAttributeValueValue != eventEntityIdAttributeValueValue)
				{
					DomainError.Named("mutateWrongEntity", "Entity Id AttributeValueValue {0} in state but entity id AttributeValueValue {1} in event", stateEntityIdAttributeValueValue, eventEntityIdAttributeValueValue);
				}
		}
	}

}

