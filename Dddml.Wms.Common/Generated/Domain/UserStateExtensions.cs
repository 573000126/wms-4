// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class UserStateExtensions
	{

        public static IUserCommand ToCreateOrMergePatchUser(this UserState state)
        {
            bool bUnsaved = ((IUserState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateUser();
            }
            else 
            {
                return state.ToMergePatchUser();
            }
        }

        public static DeleteUser ToDeleteUser(this UserState state)
        {
            var cmd = new DeleteUser();
            cmd.UserId = state.UserId;
            cmd.Version = state.Version;

            return cmd;
        }

        public static MergePatchUser ToMergePatchUser(this UserState state)
        {
            var cmd = new MergePatchUser();

            cmd.Version = state.Version;

            cmd.UserId = state.UserId;
            cmd.UserName = state.UserName;
            cmd.AccessFailedCount = state.AccessFailedCount;
            cmd.Email = state.Email;
            cmd.EmailConfirmed = state.EmailConfirmed;
            cmd.LockoutEnabled = state.LockoutEnabled;
            cmd.LockoutEndDateUtc = state.LockoutEndDateUtc;
            cmd.PasswordHash = state.PasswordHash;
            cmd.PhoneNumber = state.PhoneNumber;
            cmd.PhoneNumberConfirmed = state.PhoneNumberConfirmed;
            cmd.TwoFactorEnabled = state.TwoFactorEnabled;
            cmd.SecurityStamp = state.SecurityStamp;
            cmd.Active = state.Active;
            
            if (state.UserName == null) { cmd.IsPropertyUserNameRemoved = true; }
            if (state.Email == null) { cmd.IsPropertyEmailRemoved = true; }
            if (state.LockoutEndDateUtc == null) { cmd.IsPropertyLockoutEndDateUtcRemoved = true; }
            if (state.PasswordHash == null) { cmd.IsPropertyPasswordHashRemoved = true; }
            if (state.PhoneNumber == null) { cmd.IsPropertyPhoneNumberRemoved = true; }
            if (state.SecurityStamp == null) { cmd.IsPropertySecurityStampRemoved = true; }
            foreach (UserRoleState d in state.UserRoles)
            {
                var c = d.ToCreateOrMergePatchUserRole();
                cmd.UserRoleCommands.Add(c);
            }
            foreach (UserClaimState d in state.UserClaims)
            {
                var c = d.ToCreateOrMergePatchUserClaim();
                cmd.UserClaimCommands.Add(c);
            }
            foreach (UserPermissionState d in state.UserPermissions)
            {
                var c = d.ToCreateOrMergePatchUserPermission();
                cmd.UserPermissionCommands.Add(c);
            }
            return cmd;
        }

        public static CreateUser ToCreateUser(this UserState state)
        {
            var cmd = new CreateUser();

            cmd.Version = state.Version;

            cmd.UserId = state.UserId;
            cmd.UserName = state.UserName;
            cmd.AccessFailedCount = state.AccessFailedCount;
            cmd.Email = state.Email;
            cmd.EmailConfirmed = state.EmailConfirmed;
            cmd.LockoutEnabled = state.LockoutEnabled;
            cmd.LockoutEndDateUtc = state.LockoutEndDateUtc;
            cmd.PasswordHash = state.PasswordHash;
            cmd.PhoneNumber = state.PhoneNumber;
            cmd.PhoneNumberConfirmed = state.PhoneNumberConfirmed;
            cmd.TwoFactorEnabled = state.TwoFactorEnabled;
            cmd.SecurityStamp = state.SecurityStamp;
            cmd.Active = state.Active;
            foreach (UserRoleState d in state.UserRoles)
            {
                var c = d.ToCreateUserRole();
                cmd.UserRoles.Add(c);
            }
            foreach (UserClaimState d in state.UserClaims)
            {
                var c = d.ToCreateUserClaim();
                cmd.UserClaims.Add(c);
            }
            foreach (UserPermissionState d in state.UserPermissions)
            {
                var c = d.ToCreateUserPermission();
                cmd.UserPermissions.Add(c);
            }
            return cmd;
        }
		

	}

}

