// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.Domain
{

    public partial class AttributeAggregate : IAttributeAggregate
    {

        readonly IAttributeState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IAttributeState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public AttributeAggregate(IAttributeState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (_state.Version == AttributeState.VersionZero)
            {
                if (c is ICreateAttribute)
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (c is ICreateAttribute)
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        protected virtual void Apply(IEvent e)
        {
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateAttribute c)
        {
            IAttributeStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchAttribute c)
        {
            IAttributeStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteAttribute c)
        {
            IAttributeStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IAttributeStateCreated Map(ICreateAttribute c)
        {
			var stateEventId = new AttributeStateEventId(c.AttributeId, c.Version);
            IAttributeStateCreated e = NewAttributeStateCreated(stateEventId);
		
            e.Name = c.Name;

            e.Description = c.Description;

            e.IsMandatory = c.IsMandatory;

            e.IsInstanceAttribute = c.IsInstanceAttribute;

            e.AttributeValueType = c.AttributeValueType;

            e.IsList = c.IsList;

            e.FieldName = c.FieldName;

            e.ReferenceId = c.ReferenceId;

            e.Active = c.Active;

            ReflectUtils.CopyPropertyValue("CommandId", c, e);//TODO CommandId 太特殊了！！！


            (e as AttributeStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;
			var attributeVersion = c.Version;

            foreach (ICreateAttributeValue innerCommand in c.AttributeValues)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IAttributeValueStateCreated innerEvent = MapCreate(innerCommand, c, attributeVersion);
                e.AddAttributeValueEvent(innerEvent);
            }


            return e;
        }

        protected virtual IAttributeStateMergePatched Map(IMergePatchAttribute c)
        {
			var stateEventId = new AttributeStateEventId(c.AttributeId, c.Version);
            IAttributeStateMergePatched e = NewAttributeStateMergePatched(stateEventId);

            e.Name = c.Name;

            e.Description = c.Description;

            e.IsMandatory = c.IsMandatory;

            e.IsInstanceAttribute = c.IsInstanceAttribute;

            e.AttributeValueType = c.AttributeValueType;

            e.IsList = c.IsList;

            e.FieldName = c.FieldName;

            e.ReferenceId = c.ReferenceId;

            e.Active = c.Active;

            e.IsPropertyNameRemoved = c.IsPropertyNameRemoved;

            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;

            e.IsPropertyIsMandatoryRemoved = c.IsPropertyIsMandatoryRemoved;

            e.IsPropertyIsInstanceAttributeRemoved = c.IsPropertyIsInstanceAttributeRemoved;

            e.IsPropertyAttributeValueTypeRemoved = c.IsPropertyAttributeValueTypeRemoved;

            e.IsPropertyIsListRemoved = c.IsPropertyIsListRemoved;

            e.IsPropertyFieldNameRemoved = c.IsPropertyFieldNameRemoved;

            e.IsPropertyReferenceIdRemoved = c.IsPropertyReferenceIdRemoved;

            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;


            ReflectUtils.CopyPropertyValue("CommandId", c, e);//TODO CommandId 太特殊了！！！


            (e as AttributeStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;

			var attributeVersion = c.Version;

            foreach (IAttributeValueCommand innerCommand in c.AttributeValueCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IAttributeValueStateEvent innerEvent = Map(innerCommand, c, attributeVersion);
                e.AddAttributeValueEvent(innerEvent);
            }


            return e;
        }

        protected virtual IAttributeStateDeleted Map(IDeleteAttribute c)
        {
			var stateEventId = new AttributeStateEventId(c.AttributeId, c.Version);
            IAttributeStateDeleted e = NewAttributeStateDeleted(stateEventId);
			
            ReflectUtils.CopyPropertyValue("CommandId", c, e);//TODO CommandId 太特殊了！！！


            (e as AttributeStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;


            return e;
        }


        protected void ThrowOnInconsistentCommands(IAttributeCommand command, IAttributeValueCommand innerCommand)
        {
            IAttributeStateProperties properties =  command as IAttributeStateProperties ;
            IAttributeValueStateProperties innerProperties = innerCommand as IAttributeValueStateProperties;
            if (properties == null || innerProperties == null) { return; }
            var outerAttributeIdName = "AttributeId";
            var outerAttributeIdValue = properties.AttributeId;
            var innerAttributeIdName = "AttributeId";
            var innerAttributeIdValue = innerProperties.AttributeId;
            SetNullInnerIdOrThrowOnInconsistentIds(innerProperties, innerAttributeIdName, innerAttributeIdValue, outerAttributeIdName, outerAttributeIdValue);

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IAttributeValueStateEvent Map(IAttributeValueCommand c, IAttributeCommand outerCommand, long attributeVersion)
        {
            var create = c as ICreateAttributeValue;
            if(create != null)
            {
                return MapCreate(create, outerCommand, attributeVersion);
            }

            var merge = c as IMergePatchAttributeValue;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, attributeVersion);
            }

            var remove = c as IRemoveAttributeValue;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, attributeVersion);
            }
            throw new NotSupportedException();
        }


        protected virtual IAttributeValueStateCreated MapCreate(ICreateAttributeValue c, IAttributeCommand outerCommand, long attributeVersion)
        {
            (c as AttributeValueCommandBase).RequesterId = (outerCommand as AttributeCommandBase).RequesterId;
			var stateEventId = new AttributeValueStateEventId(c.AttributeId, c.Value, attributeVersion);
            IAttributeValueStateCreated e = NewAttributeValueStateCreated(stateEventId);

            e.Name = c.Name;

            e.Description = c.Description;

            e.ReferenceId = c.ReferenceId;

            e.Active = c.Active;


            (e as AttributeValueStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeValueStateEventBase).CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IAttributeValueStateMergePatched MapMergePatch(IMergePatchAttributeValue c, IAttributeCommand outerCommand, long attributeVersion)
        {
            (c as AttributeValueCommandBase).RequesterId = (outerCommand as AttributeCommandBase).RequesterId;
			var stateEventId = new AttributeValueStateEventId(c.AttributeId, c.Value, attributeVersion);
            IAttributeValueStateMergePatched e = NewAttributeValueStateMergePatched(stateEventId);

            e.Name = c.Name;

            e.Description = c.Description;

            e.ReferenceId = c.ReferenceId;

            e.Active = c.Active;

            e.IsPropertyNameRemoved = c.IsPropertyNameRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyReferenceIdRemoved = c.IsPropertyReferenceIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            (e as AttributeValueStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeValueStateEventBase).CreatedAt = DateTime.Now;
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IAttributeValueStateRemoved MapRemove(IRemoveAttributeValue c, IAttributeCommand outerCommand, long attributeVersion)
        {
            (c as AttributeValueCommandBase).RequesterId = (outerCommand as AttributeCommandBase).RequesterId;
			var stateEventId = new AttributeValueStateEventId(c.AttributeId, c.Value, attributeVersion);
            IAttributeValueStateRemoved e = NewAttributeValueStateRemoved(stateEventId);


            (e as AttributeValueStateEventBase).CreatedBy = (string)c.RequesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeValueStateEventBase).CreatedAt = DateTime.Now;

            return e;

        }// END Map(IRemove... ////////////////////////////



        private void SetNullInnerIdOrThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (innerIdValue == null)
            {
                ReflectUtils.SetPropertyValue(innerIdName, innerObject, outerIdValue);
            }
            else if (innerIdValue != outerIdValue)
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected AttributeStateCreated NewAttributeStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new AttributeStateEventId(this._state.AttributeId, this._state.Version);
            var e = NewAttributeStateCreated(stateEventId);

            e.CommandId = commandId;

            (e as AttributeStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }

        protected AttributeStateMergePatched NewAttributeStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new AttributeStateEventId(this._state.AttributeId, this._state.Version);
            var e = NewAttributeStateMergePatched(stateEventId);

            e.CommandId = commandId;

            (e as AttributeStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }


        protected AttributeStateDeleted NewAttributeStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new AttributeStateEventId(this._state.AttributeId, this._state.Version);
            var e = NewAttributeStateDeleted(stateEventId);

            e.CommandId = commandId;

            (e as AttributeStateEventBase).CreatedBy = (string)requesterId;//TODO RequestId 是不是太特殊了？？？
            (e as AttributeStateEventBase).CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private AttributeStateCreated NewAttributeStateCreated(AttributeStateEventId stateEventId)
		{
			return new AttributeStateCreated(stateEventId);			
		}

        private AttributeStateMergePatched NewAttributeStateMergePatched(AttributeStateEventId stateEventId)
		{
			return new AttributeStateMergePatched(stateEventId);
		}

        private AttributeStateDeleted NewAttributeStateDeleted(AttributeStateEventId stateEventId)
		{
			return new AttributeStateDeleted(stateEventId);
		}


		private AttributeValueStateCreated NewAttributeValueStateCreated(AttributeValueStateEventId stateEventId)
		{
			return new AttributeValueStateCreated(stateEventId);
		}

        private AttributeValueStateMergePatched NewAttributeValueStateMergePatched(AttributeValueStateEventId stateEventId)
		{
			return new AttributeValueStateMergePatched(stateEventId);
		}

        private AttributeValueStateRemoved NewAttributeValueStateRemoved(AttributeValueStateEventId stateEventId)
		{
			return new AttributeValueStateRemoved(stateEventId);
		}


    }

}

