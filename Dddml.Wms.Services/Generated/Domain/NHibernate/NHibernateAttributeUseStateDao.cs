// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainNHibernateAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.NHibernate
{

	public class NHibernateAttributeUseStateDao : IAttributeUseStateDao
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

		public NHibernateAttributeUseStateDao()
		{
		}
 

        [Transaction(ReadOnly = true)]
        public IAttributeUseState Get(AttributeSetAttributeUseId id)
        {
            IAttributeUseState state = CurrentSession.Get<AttributeUseState>(id);
            if (state == null)
            {
                state = new AttributeUseState();
                (state as AttributeUseState).AttributeSetAttributeUseId = id;
            }
            return state;
        }

       
        public void Save(IAttributeUseState state)
        {
            CurrentSession.SaveOrUpdate(state);
            var saveable = state as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
        }


        public void Delete(IAttributeUseState state)
        {
            CurrentSession.Delete(state);
        }


        [Transaction(ReadOnly = true)]
        public IEnumerable<IAttributeUseState> FindByAttributeSetId(string attributeSetId)
        {
            var criteria = CurrentSession.CreateCriteria<AttributeUseState>();
            var partIdCondition = Restrictions.Conjunction()
                .Add(Restrictions.Eq("AttributeSetAttributeUseId.AttributeSetId", attributeSetId))
                ;

            return criteria.Add(partIdCondition).List<AttributeUseState>();
        }

    }

	
}

