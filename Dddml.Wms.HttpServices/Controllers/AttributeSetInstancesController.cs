// <autogenerated>
//   This file was generated by T4 code generator GenerateControllers.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.HttpServices.ApiControllers
{

    public partial class AttributeSetInstancesController : ApiController
    {

        IAttributeSetInstanceApplicationService _attributeSetInstanceApplicationService = ApplicationContext.Current["AttributeSetInstanceApplicationService"] as IAttributeSetInstanceApplicationService;

        [HttpGet]
        public IEnumerable<AttributeSetInstanceStateDto> GetAll(int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = _attributeSetInstanceApplicationService.GetAll(firstResult, maxResults);
            var stateDtos = new List<AttributeSetInstanceStateDto>();
            foreach (var s in states)
            {
                stateDtos.Add(new AttributeSetInstanceStateDto((AttributeSetInstanceState)s));
            }
            return stateDtos;
        }

        [HttpGet]
        public AttributeSetInstanceStateDto Get(string id)
        {
            var idObj = id;
            var state = (AttributeSetInstanceState)_attributeSetInstanceApplicationService.Get(idObj);
            var stateDto = new AttributeSetInstanceStateDto(state);
            stateDto.AllFieldsReturned = true;
            return stateDto;
        }

        [HttpPut]
        public void Put(string id, [FromBody]CreateAttributeSetInstanceDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceApplicationService.When(value.ToCommand() as ICreateAttributeSetInstance);
        }

        [HttpPatch]
        public void Patch(string id, [FromBody]MergePatchAttributeSetInstanceDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceApplicationService.When(value.ToCommand() as IMergePatchAttributeSetInstance);
        }

       [HttpDelete]
        public void Delete(string id, string commandId, string requesterId = default(string))
        {
            var value = new DeleteAttributeSetInstanceDto();
            value.CommandId = commandId;
            value.RequesterId = requesterId;
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceApplicationService.When(value.ToCommand() as IDeleteAttributeSetInstance);
        }

		// /////////////////////////////////////////////////

        protected static void SetNullIdOrThrowOnInconsistentIds(string id, CreateOrMergePatchOrDeleteAttributeSetInstanceDto value)
        {
            var idObj = id;
            
            if (value.AttributeSetInstanceId == null)
            {
                value.AttributeSetInstanceId = idObj;
            }
            else if ((value as IAttributeSetInstanceStateProperties).AttributeSetInstanceId != idObj)
            {
                throw DomainError.Named("inconsistentId", "Argument Id {0} NOT equals body Id {1}", id, value.AttributeSetInstanceId);
            }
        }


    }


}

