// <autogenerated>
//   This file was generated by T4 code generator GenerateControllers.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.HttpServices.ApiControllers
{

    public partial class AttributeSetInstanceExtensionFieldGroupsController : ApiController
    {


        IAttributeSetInstanceExtensionFieldGroupApplicationService _attributeSetInstanceExtensionFieldGroupApplicationService = ApplicationContext.Current["AttributeSetInstanceExtensionFieldGroupApplicationService"] as IAttributeSetInstanceExtensionFieldGroupApplicationService;

        [HttpGet]
        public IEnumerable<AttributeSetInstanceExtensionFieldGroupStateDto> GetAll(int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = _attributeSetInstanceExtensionFieldGroupApplicationService.GetAll(firstResult, maxResults);
            var stateDtos = new List<AttributeSetInstanceExtensionFieldGroupStateDto>();
            foreach (var s in states)
            {
                stateDtos.Add(new AttributeSetInstanceExtensionFieldGroupStateDto((AttributeSetInstanceExtensionFieldGroupState)s));
            }
            return stateDtos;
        }

        [HttpGet]
        public AttributeSetInstanceExtensionFieldGroupStateDto Get(string id)
        {
            var idObj = id;
            var state = (AttributeSetInstanceExtensionFieldGroupState)_attributeSetInstanceExtensionFieldGroupApplicationService.Get(idObj);
            var stateDto = new AttributeSetInstanceExtensionFieldGroupStateDto(state);
            stateDto.AllFieldsReturned = true;
            return stateDto;
        }

        [HttpPut]
        public void Put(string id, [FromBody]CreateAttributeSetInstanceExtensionFieldGroupDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceExtensionFieldGroupApplicationService.When(value.ToCommand() as ICreateAttributeSetInstanceExtensionFieldGroup);
        }

        [HttpPatch]
        public void Patch(string id, [FromBody]MergePatchAttributeSetInstanceExtensionFieldGroupDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceExtensionFieldGroupApplicationService.When(value.ToCommand() as IMergePatchAttributeSetInstanceExtensionFieldGroup);
        }

        [HttpDelete]
        public void Delete(string id, string commandId, string requesterId = default(string))
        {
            var value = new DeleteAttributeSetInstanceExtensionFieldGroupDto();
            value.CommandId = commandId;
            value.RequesterId = requesterId;
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetInstanceExtensionFieldGroupApplicationService.When(value.ToCommand() as IDeleteAttributeSetInstanceExtensionFieldGroup);
        }

		// /////////////////////////////////////////////////

        protected static void SetNullIdOrThrowOnInconsistentIds(string id, CreateOrMergePatchOrDeleteAttributeSetInstanceExtensionFieldGroupDto value)
        {
            var idObj = id;
            if (value.Id == null)
            {
                value.Id = idObj;
            }
            else if (!(value as IAttributeSetInstanceExtensionFieldGroupStateProperties).Id.Equals(idObj))
            {
                throw DomainError.Named("inconsistentId", "Argument Id {0} NOT equals body Id {1}", id, value.Id);
            }
        }


    }




}

