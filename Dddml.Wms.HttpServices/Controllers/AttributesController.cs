// <autogenerated>
//   This file was generated by T4 code generator GenerateControllers.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ComponentModel;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Web.Http;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;
using Newtonsoft.Json.Linq;
using Dddml.Wms.Domain.Metadata;


namespace Dddml.Wms.HttpServices.ApiControllers
{

    [RoutePrefix("api/Attributes")]
    public partial class AttributesController : ApiController
    {

        IIdGenerator<string, ICreateAttribute> _attributeIdGenerator = ApplicationContext.Current["AttributeIdGenerator"] as IIdGenerator<string, ICreateAttribute>;

        IAttributeApplicationService _attributeApplicationService = ApplicationContext.Current["AttributeApplicationService"] as IAttributeApplicationService;

        [HttpGet]
        public IEnumerable<AttributeStateDto> GetAll(string sort = null, string fields = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
          try {
            var states = _attributeApplicationService.Get(GetQueryFilterDictionary(this.Request.GetQueryNameValuePairs())
                , GetQueryOrders(sort), firstResult, maxResults);
            var stateDtos = new List<AttributeStateDto>();
            foreach (var s in states)
            {
                var dto = new AttributeStateDto((AttributeState)s);
                if (String.IsNullOrWhiteSpace(fields))
                {
                    dto.AllFieldsReturned = true;
                }
                else
                {
                    dto.ReturnedFieldsString = fields;
                }
                stateDtos.Add(dto);
            }
            return stateDtos;
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [HttpGet]
        public AttributeStateDto Get(string id, string fields = null)
        {
          try {
            var idObj = id;
            var state = (AttributeState)_attributeApplicationService.Get(idObj);
            var stateDto = new AttributeStateDto(state);
            if (String.IsNullOrWhiteSpace(fields))
            {
                stateDto.AllFieldsReturned = true;
            }
            else
            {
                stateDto.ReturnedFieldsString = fields;
            }
            return stateDto;
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("_nextId")]
        [HttpGet]
        public string GetNextId()
        {
          try {
            return _attributeIdGenerator.GetNextId();
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [HttpPut]
        public void Put(string id, [FromBody]CreateAttributeDto value)
        {
          try {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeApplicationService.When(value.ToCommand() as ICreateAttribute);
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [HttpPatch]
        public void Patch(string id, [FromBody]MergePatchAttributeDto value)
        {
          try {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeApplicationService.When(value.ToCommand() as IMergePatchAttribute);
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [HttpDelete]
        public void Delete(string id, string commandId, string requesterId = default(string))
        {
          try {
            var value = new DeleteAttributeDto();
            value.CommandId = commandId;
            value.RequesterId = requesterId;
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeApplicationService.When(value.ToCommand() as IDeleteAttribute);
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }


        [Route("_metadata/filteringFields")]
        [HttpGet]
        public IEnumerable<PropertyMetadata> GetMetadataFilteringFields()
        {
          try {
            var filtering = new List<PropertyMetadata>();
            foreach (var p in AttributeMetadata.Instance.Properties)
            {
                if (PropertyMetadata.IsFilteringProperty(p))
                {
                    filtering.Add(p);
                }
            }
            return filtering;
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("{id}/_stateEvents/{version}")]
        [HttpGet]
        public IAttributeStateEvent GetStateEvent(string id, long version)
        {
          try {
            var idObj = id;
            return _attributeApplicationService.GetStateEvent(idObj, version);
          } catch (Exception ex) { var response = GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }


		// /////////////////////////////////////////////////

        protected virtual HttpResponseMessage GetErrorHttpResponseMessage(Exception ex)
        {
            var errorName = ex.GetType().Name;
            var errorMessage = ex.Message;
            if (ex is DomainError)
            {
                DomainError de = ex as DomainError;
                errorName = de.Name;
                errorMessage = de.Message;
            }
            else
            {
                //改进??
                errorMessage = String.IsNullOrWhiteSpace(ex.Message) ? String.Empty : ex.Message.Substring(0, (ex.Message.Length > 140) ? 140 : ex.Message.Length);
            }
            dynamic content = new JObject();
            content.ErrorName = errorName;
            content.ErrorMessage = errorMessage;
            var response = new HttpResponseMessage(HttpStatusCode.InternalServerError)
            {
                Content = new ObjectContent<JObject>(content as JObject, new JsonMediaTypeFormatter()),
                ReasonPhrase = "Server Error"
            };
            return response;
        }

        protected static void SetNullIdOrThrowOnInconsistentIds(string id, CreateOrMergePatchOrDeleteAttributeDto value)
        {
            var idObj = id;
            if (value.AttributeId == null)
            {
                value.AttributeId = idObj;
            }
            else if (!(value as IAttributeStateProperties).AttributeId.Equals(idObj))
            {
                throw DomainError.Named("inconsistentId", "Argument Id {0} NOT equals body Id {1}", id, value.AttributeId);
            }
        }


        protected virtual string GetFilterPropertyName(string fieldName)
        {
            if (String.Equals(fieldName, "sort", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "firstResult", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "maxResults", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "fields", StringComparison.InvariantCultureIgnoreCase))
            {
                return null;
            }
            if (AttributeMetadata.Instance.PropertyMetadataDictionary.ContainsKey(fieldName))
            {
                var p = AttributeMetadata.Instance.PropertyMetadataDictionary[fieldName];
                if (PropertyMetadata.IsFilteringProperty(p))
                {
                    var propertyName = fieldName;
                    if (p.IsDerived)
                    {
                        propertyName = p.DerivedFrom;
                    }
                    return propertyName;
                }
            }
            return null;
        }

        protected virtual Type GetFilterPropertyType(string propertyName)
        {
            if (AttributeMetadata.Instance.PropertyMetadataDictionary.ContainsKey(propertyName))
            {
                return AttributeMetadata.Instance.PropertyMetadataDictionary[propertyName].Type;
            }
            return typeof(string);
        }

        private IDictionary<string, object> GetQueryFilterDictionary(IEnumerable<KeyValuePair<string, string>> queryNameValuePairs)
        {
            var filter = new Dictionary<string, object>();
            foreach (var p in queryNameValuePairs)
            {
                var pName = GetFilterPropertyName(p.Key);
                if (!String.IsNullOrWhiteSpace(pName))
                {
                    Type type = GetFilterPropertyType(pName);
                    var pValue = ApplicationContext.Current.TypeConverter.ConvertFromString(type, p.Value);
                    filter.Add(pName, pValue);
                }
            }
            return filter;
        }

        private IList<string> GetQueryOrders(string str)
        {
            if (String.IsNullOrWhiteSpace(str))
            {
                return new string[0];
            }
            var arr = str.Split(new string[] { QueryOrderSeparator }, StringSplitOptions.RemoveEmptyEntries);
            var orders = new List<string>();
            foreach (var a in arr)
            {
                orders.Add(a.Trim());
            }
            return orders;
        }

        protected virtual string QueryOrderSeparator
        {
            get { return ","; }
        }


    }




}

