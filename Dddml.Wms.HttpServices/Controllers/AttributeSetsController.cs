// <autogenerated>
//   This file was generated by T4 code generator GenerateControllers.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Dddml.Wms.Domain;

using Dddml.Wms.Specialization;

namespace Dddml.Wms.HttpServices.ApiControllers
{

    public partial class AttributeSetsController : ApiController
    {

        IAttributeSetApplicationService _attributeSetApplicationService = ApplicationContext.Current["AttributeSetApplicationService"] as IAttributeSetApplicationService;

        [HttpGet]
        public IEnumerable<AttributeSetStateDto> GetAll(int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = _attributeSetApplicationService.GetAll(firstResult, maxResults);
            var stateDtos = new List<AttributeSetStateDto>();
            foreach (var s in states)
            {
                stateDtos.Add(new AttributeSetStateDto((AttributeSetState)s));
            }
            return stateDtos;
        }

        [HttpGet]
        public AttributeSetStateDto Get(string id)
        {
            var idObj = id;
            var state = (AttributeSetState)_attributeSetApplicationService.Get(idObj);
            var stateDto = new AttributeSetStateDto(state);
            stateDto.AllFieldsReturned = true;
            return stateDto;
        }

        [HttpPut]
        public void Put(string id, [FromBody]CreateAttributeSetDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetApplicationService.When(value.ToCommand() as ICreateAttributeSet);
        }

        [HttpPatch]
        public void Patch(string id, [FromBody]MergePatchAttributeSetDto value)
        {
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetApplicationService.When(value.ToCommand() as IMergePatchAttributeSet);
        }

       [HttpDelete]
        public void Delete(string id, string commandId, string requesterId = default(string))
        {
            var value = new DeleteAttributeSetDto();
            value.CommandId = commandId;
            value.RequesterId = requesterId;
            SetNullIdOrThrowOnInconsistentIds(id, value);
            _attributeSetApplicationService.When(value.ToCommand() as IDeleteAttributeSet);
        }

		// /////////////////////////////////////////////////

        protected static void SetNullIdOrThrowOnInconsistentIds(string id, CreateOrMergePatchOrDeleteAttributeSetDto value)
        {
            var idObj = id;
            
            if (value.AttributeSetId == null)
            {
                value.AttributeSetId = idObj;
            }
            else if ((value as IAttributeSetStateProperties).AttributeSetId != idObj)
            {
                throw DomainError.Named("inconsistentId", "Argument Id {0} NOT equals body Id {1}", id, value.AttributeSetId);
            }
        }


    }


}

