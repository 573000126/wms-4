<#@ template language="C#" debug="True" #>
<#@ output extension=".config" #>
<#@ assembly name="$(SolutionDir)packages\Microsoft.Owin.Security.3.0.1\lib\net45\Microsoft.Owin.Security.dll" #>
<#@ import namespace="Microsoft.Owin.Security.DataHandler.Encoder" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography" #>
<#@ include file="T4Toolbox.tt" #>

<#
// <copyright file="GenerateAppSettingsSecretsConfig.tt" company="">
//  Copyright Â© . All Rights Reserved.
// </copyright>

    var clientId = Guid.NewGuid().ToString("N");
    //var key = new byte[32];
    //RNGCryptoServiceProvider.Create().GetBytes(key);
    var key = GetSecretVisualBytes32();
    var base64Secret = TextEncodings.Base64Url.Encode(key);
#>
<appSettings>   

   <add key="self.ClientId" value="<#= clientId #>" />
   <add key="self.Base64Secret" value="<#= base64Secret #>" />
   <add key="self.ClientName" value="Dddml.Wms.API 1" />
   
</appSettings>

<#+

        private static byte[] GetSecretVisualBytes32()
        {
            var key = new byte[32 * 5];
            RNGCryptoServiceProvider.Create().GetBytes(key);
            var byteList = new List<byte>(32);
            while (byteList.Count < 32)
            {
                foreach (var b in key)
                {
                    if (b >= '0' && b <= '9' || b >= 'a' && b <= 'z' || b >= 'A' && b <= 'Z')
                    {
                        byteList.Add(b);
                    }
                    if (byteList.Count >= 32)
                    {
                        break;
                    }
                }
            }
            var visualBytes = byteList.ToArray();
            return visualBytes;
        }

#>