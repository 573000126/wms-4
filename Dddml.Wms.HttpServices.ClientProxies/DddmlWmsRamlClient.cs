// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RAML.Api.Core;
using Raml.Common;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using Dddml.Wms.Domain;

namespace Dddml.Wms.HttpServices.ClientProxies.Raml
{
    public partial class Attribute
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attribute(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeGetResponse> Get(Models.AttributeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributePutRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributePatchRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeDeleteRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Attributes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attributes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributesGetResponse> Get(Models.AttributesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSet
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSet(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetGetResponse> Get(Models.AttributeSetGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetPutRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetPatchRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetDeleteRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSets
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSets(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetsGetResponse> Get(Models.AttributeSetsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstance
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstance(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceGetResponse> Get(Models.AttributeSetInstanceGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstancePutRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstancePatchRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceDeleteRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstances
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstances(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstancesGetResponse> Get(Models.AttributeSetInstancesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstancesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroup
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroup(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldGroupPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldGroupPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroups
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroups(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupsGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    /// <summary>
    /// Main class for grouping root resources. Nested resources are defined as properties. The constructor can optionally receive an URL and HttpClient instance to override the default ones.
    /// </summary>
    public partial class DddmlWmsRamlClient
    {

		public SchemaValidationSettings SchemaValidation { get; private set; } 

        protected readonly HttpClient client;
        public const string BaseUri = "/api/";

        internal HttpClient Client { get { return client; } }




        public DddmlWmsRamlClient(string endpointUrl)
        {
            SchemaValidation = new SchemaValidationSettings
			{
				Enabled = true,
				RaiseExceptions = true
			};

			if(string.IsNullOrWhiteSpace(endpointUrl))
                throw new ArgumentException("You must specify the endpoint URL", "endpointUrl");

			if (endpointUrl.Contains("{"))
			{
				var regex = new Regex(@"\{([^\}]+)\}");
				var matches = regex.Matches(endpointUrl);
				var parameters = new List<string>();
				foreach (Match match in matches)
				{
					parameters.Add(match.Groups[1].Value);
				}
				throw new InvalidOperationException("Please replace parameter/s " + string.Join(", ", parameters) + " in the URL before passing it to the constructor ");
			}

            client = new HttpClient {BaseAddress = new Uri(endpointUrl)};
        }

        public DddmlWmsRamlClient(HttpClient httpClient)
        {
            if(httpClient.BaseAddress == null)
                throw new InvalidOperationException("You must set the BaseAddress property of the HttpClient instance");

            client = httpClient;

			SchemaValidation = new SchemaValidationSettings
			{
				Enabled = true,
				RaiseExceptions = true
			};
        }

        

        public virtual Attribute Attribute
        {
            get { return new Attribute(this); }
        }
                

        public virtual AttributeSet AttributeSet
        {
            get { return new AttributeSet(this); }
        }
                

        public virtual AttributeSetInstance AttributeSetInstance
        {
            get { return new AttributeSetInstance(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroup AttributeSetInstanceExtensionFieldGroup
        {
            get { return new AttributeSetInstanceExtensionFieldGroup(this); }
        }
                

        public virtual Attributes Attributes
        {
            get { return new Attributes(this); }
        }
                

        public virtual AttributeSets AttributeSets
        {
            get { return new AttributeSets(this); }
        }
                

        public virtual AttributeSetInstances AttributeSetInstances
        {
            get { return new AttributeSetInstances(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroups AttributeSetInstanceExtensionFieldGroups
        {
            get { return new AttributeSetInstanceExtensionFieldGroups(this); }
        }
                


		public void AddDefaultRequestHeader(string name, string value)
		{
			client.DefaultRequestHeaders.Add(name, value);
		}

		public void AddDefaultRequestHeader(string name, IEnumerable<string> values)
		{
			client.DefaultRequestHeaders.Add(name, values);
		}


    }

} // end namespace









namespace Dddml.Wms.HttpServices.ClientProxies.Raml.Models
{
    public partial class  AttributeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstancesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}
    /// </summary>
    public partial class  AttributeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}
    /// </summary>
    public partial class  AttributeSetUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}
    /// </summary>
    public partial class  AttributeSetInstanceUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Request object for method Get of class Attribute
    /// </summary>
    public partial class AttributeGetRequest : ApiRequest
    {
        public AttributeGetRequest(AttributeUriParameters UriParameters, AttributeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Attribute
    /// </summary>
    public partial class AttributePutRequest : ApiRequest
    {
        public AttributePutRequest(AttributeUriParameters UriParameters, CreateAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Attribute
    /// </summary>
    public partial class AttributePatchRequest : ApiRequest
    {
        public AttributePatchRequest(AttributeUriParameters UriParameters, MergePatchAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Attribute
    /// </summary>
    public partial class AttributeDeleteRequest : ApiRequest
    {
        public AttributeDeleteRequest(AttributeUriParameters UriParameters, AttributeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Attributes
    /// </summary>
    public partial class AttributesGetRequest : ApiRequest
    {
        public AttributesGetRequest(AttributesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSet
    /// </summary>
    public partial class AttributeSetGetRequest : ApiRequest
    {
        public AttributeSetGetRequest(AttributeSetUriParameters UriParameters, AttributeSetGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSet
    /// </summary>
    public partial class AttributeSetPutRequest : ApiRequest
    {
        public AttributeSetPutRequest(AttributeSetUriParameters UriParameters, CreateAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSet
    /// </summary>
    public partial class AttributeSetPatchRequest : ApiRequest
    {
        public AttributeSetPatchRequest(AttributeSetUriParameters UriParameters, MergePatchAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSet
    /// </summary>
    public partial class AttributeSetDeleteRequest : ApiRequest
    {
        public AttributeSetDeleteRequest(AttributeSetUriParameters UriParameters, AttributeSetDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSets
    /// </summary>
    public partial class AttributeSetsGetRequest : ApiRequest
    {
        public AttributeSetsGetRequest(AttributeSetsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceGetRequest : ApiRequest
    {
        public AttributeSetInstanceGetRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePutRequest : ApiRequest
    {
        public AttributeSetInstancePutRequest(AttributeSetInstanceUriParameters UriParameters, CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePatchRequest : ApiRequest
    {
        public AttributeSetInstancePatchRequest(AttributeSetInstanceUriParameters UriParameters, MergePatchAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceDeleteRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesGetRequest : ApiRequest
    {
        public AttributeSetInstancesGetRequest(AttributeSetInstancesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupGetRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPutRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPatchRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupDeleteRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsGetRequest(AttributeSetInstanceExtensionFieldGroupsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Attribute
    /// </summary>

    public partial class AttributeGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Attributes
    /// </summary>

    public partial class AttributesGetResponse : ApiResponse
    {


	    private IList<AttributeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeStateDto>)new XmlSerializer(typeof(IList<AttributeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSet
    /// </summary>

    public partial class AttributeSetGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSets
    /// </summary>

    public partial class AttributeSetsGetResponse : ApiResponse
    {


	    private IList<AttributeSetStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetStateDto>)new XmlSerializer(typeof(IList<AttributeSetStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstance
    /// </summary>

    public partial class AttributeSetInstanceGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstances
    /// </summary>

    public partial class AttributeSetInstancesGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupsGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldGroupStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldGroupStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldGroupStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldGroupStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class


} // end Models namespace


